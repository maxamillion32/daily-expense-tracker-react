{"version":3,"sources":["services/mocks/mocks.js","services/transaction.service.js","reducers/search/search-slice.js","reducers/transactions/transactions-slice.js","services/category.service.js","reducers/categories/categories-slice.js","services/account.service.js","reducers/accounts/accounts-slice.js","components/Search/Search.js","components/Transactions/CreateForm/Form.js","components/Balance/Balance.js","utils/utils.js","components/Transactions/Items/Item.js","components/Transactions/Items/ItemsContainer.js","components/Transactions/List.js","App.js","store/store.js","index.js"],"names":["accounts","categories","nanoid","require","id","title","balance","startBalance","archive","getRandomInt","min","max","Math","ceil","floor","random","getRandomSubarray","items","slice","count","result","push","splice","length","getRandomDate","startPoint","Date","getTime","endPoint","toISOString","transactions","Array","fill","map","sum","date","outcome","Boolean","round","account","category","TransactionDataService","this","a","json","searchTermSlice","createSlice","name","initialState","reducers","setSearchTerm","state","action","payload","clearSearchTerm","selectSearchTerm","searchTerm","actions","loadTransactions","createAsyncThunk","getAll","data","transactionsSlice","allTransactions","newTransaction","isLoading","hasError","setUserInput","value","setCategory","setAccount","addTransaction","resetState","deleteTransaction","newTransactions","filter","transaction","extraReducers","pending","fulfilled","showDelete","rejected","selectAllTransactionsState","selectNewTransactionState","selectFilteredTransactions","toLowerCase","includes","sort","b","setTransactionId","CategoryDataService","loadCategories","postCategories","newCategory","create","categoriesSlice","allCategories","isPending","isFailedToCreate","addCategory","selectAllCategoriesState","AccountDataService","loadAccounts","postAccounts","newAccount","console","log","accountsSlice","allAccounts","addAccount","selectAllAccountsState","Search","useSelector","dispatch","useDispatch","className","type","placeholder","onChange","e","userInput","target","onClick","TransactionCreateForm","newTransactionState","useState","onClickAddBtn","setOnClickAddBtn","isHidden","setIsHidden","onChangeUserInput","onChangeSelectHandler","selector","getId","idItem","item","accountId","categoryId","hiddenToggle","setTimeout","onSubmit","preventDefault","required","hidden","selected","htmlFor","Balance","sumOutcomes","reduce","sumIncomes","formatDate","dateString","toLocaleString","day","month","year","TransactionsItem","categoryTitle","accountTitle","showDeleteBtn","setShowDeleteBtn","handleDeleteButtonToggle","onMouseOver","onMouseOut","TransactionsItemsContainer","index","TransactionsList","dates","Set","App","filteredTransactions","useEffect","configureStore","reducer","transactionsReducer","categoriesReducer","accountsReducer","searchTermReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.c7758d58.chunk.js","sourcesContent":["const {nanoid} = require(`nanoid`);\n\nexport const categories = [\n  {id: 1, title: `Salary`},\n  {id: 2, title: `Rent`},\n  {id: 3, title: `Groceries`},\n  {id: 4, title: `Transportation & parking fees`},\n  {id: 5, title: `Clothing & shoes`},\n  {id: 6, title: `Family`},\n  {id: 7, title: `Coffee`},\n  {id: 8, title: `Health`},\n];\n\nexport const accounts = [\n  {id: 1, title: `Cash`, balance: 2000, startBalance: 0, archive: false},\n  {id: 2, title: `Postbank`, balance: 55000, startBalance: 0, archive: false},\n  {id: 3, title: `N26`, balance: 550000, startBalance: 0, archive: false},\n];\n\nconst getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomSubarray = (items) => {\n  items = items.slice();\n  let count = 1;\n  const result = [];\n  while (count--) {\n    result.push(\n        ...items.splice(\n            getRandomInt(0, items.length - 1), 1)\n    );\n  }\n  return result[0];\n};\n\nconst getRandomDate = () => {\n  const startPoint = new Date().getTime();\n  const endPoint = startPoint - new Date(90 * (24 * 3600 * 1000)).getTime();\n  const date = new Date(endPoint + Math.random() * (startPoint - endPoint));\n\n  return date.toISOString().slice(0, -14);\n};\n\nconst MAX_ID_LENGTH = 6;\n\nconst generateTransactions = (count, accounts, categories) => (Array(count).fill({}).map(() => ({\n    id: nanoid(MAX_ID_LENGTH),\n    sum: getRandomInt(1, 500),\n    date: getRandomDate(),\n    outcome: Boolean(Math.round(Math.random())),\n    account: getRandomSubarray(accounts),\n    category: getRandomSubarray(categories),\n  }))\n);\n\nexport const transactions = generateTransactions(20, accounts, categories);\n","import {transactions} from \"./mocks/mocks\";\n\nclass TransactionDataService {\n  constructor() {\n  // const {transactions} = mocks;\n  this.transactions = transactions;\n  }\n  async getAll() {\n    const json = this.transactions;\n    return json;\n  }\n}\n\nexport default new TransactionDataService();\n","import {createSlice} from '@reduxjs/toolkit';\n\nexport const searchTermSlice = createSlice({\n  name: \"searchTerm\",\n  initialState: '',\n  reducers: {\n    setSearchTerm: (state, action) => {\n      return action.payload;\n      },\n    clearSearchTerm: (state, action) => {\n      return '';\n      }\n    },\n});\n\nexport const selectSearchTerm = (state) => state.searchTerm;\n\nexport const {\n  setSearchTerm,\n  clearSearchTerm\n} = searchTermSlice.actions;\nexport default searchTermSlice.reducer;\n","import {createSlice, createAsyncThunk} from '@reduxjs/toolkit';\n\nimport TransactionDataService from '../../services/transaction.service';\nimport {selectSearchTerm} from '../search/search-slice';\n\n\nexport const loadTransactions = createAsyncThunk(\n  'transactions/loadData',\n  async () => {\n    const data = await TransactionDataService.getAll();\n    const json = await data;\n    return json;\n  }\n)\n\nexport const transactionsSlice = createSlice({\n  name: \"transactions\",\n  initialState: {\n    allTransactions: [],\n    newTransaction: {\n      id: new Date().getTime(),\n      sum: ``,\n      date: new Date().toISOString().slice(0, -14),\n      outcome: true,\n      account: [],\n      category: [],\n    },\n    isLoading: false,\n    hasError: false,\n  },\n  reducers: {\n    setUserInput: (state, action) => {\n      let {name, value} = action.payload;\n      if (name === `outcome`) {\n        value = !state.newTransaction.outcome;\n      }\n      return {\n        ...state,\n        newTransaction: {\n          ...state.newTransaction,\n          [name]: value\n        }\n      };\n    },\n    setCategory: (state, action) => {\n      return {\n        ...state,\n        newTransaction: {\n          ...state.newTransaction,\n          category: action.payload,\n        }\n      };\n    },\n    setAccount: (state, action) => {\n      return {\n        ...state,\n        newTransaction: {\n          ...state.newTransaction,\n          account: action.payload,\n        }\n      };\n    },\n    addTransaction: (state, action) => {\n      return {\n        ...state,\n        allTransactions: [\n          ...state.allTransactions,\n          ...action.payload,\n        ],\n      };\n    },\n    resetState: (state, action) => {\n      return {\n        ...state,\n        newTransaction: {\n          id: new Date().getTime(),\n          sum: ``,\n          date: new Date().toISOString().slice(0, -14),\n          outcome: true,\n          account: [],\n          category: [],\n        },\n      };\n    },\n    deleteTransaction: (state, action) => {\n      const id = action.payload;\n      const newTransactions = state.allTransactions.filter(transaction => transaction.id !== id)\n      return {\n        ...state,\n        allTransactions: newTransactions,\n      };\n    },\n  },\n  extraReducers: {\n    [loadTransactions.pending]: (state) => {\n      state.isLoading = true;\n      state.hasError = false;\n    },\n    [loadTransactions.fulfilled]: (state, action) => {\n      state.allTransactions = action.payload;\n      state.newTransaction = {\n        ...state.newTransaction,\n      }\n      state.isLoading = false;\n      state.hasError = false;\n      state.showDelete = false;\n    },\n    [loadTransactions.rejected]: (state) => {\n      state.isLoading = false;\n      state.hasError = true;\n    },\n  },\n});\n\nexport const selectAllTransactionsState = (state) => state.transactions.allTransactions;\nexport const selectNewTransactionState = (state) => state.transactions.newTransaction;\nexport const isLoading = (state) => state.transactions.isLoading;\nexport const hasError = (state) => state.transactions.hasError;\n\nexport const selectFilteredTransactions = (state) => {\n  const allTransactions = selectAllTransactionsState(state);\n  const searchTerm = selectSearchTerm(state);\n\n  return allTransactions\n          .filter((transaction) => transaction.category.title.toLowerCase().includes(searchTerm.toLowerCase()))\n          .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n};\n\nexport const {\n  setUserInput,\n  setCategory,\n  setAccount,\n  setTransactionId,\n  addTransaction,\n  resetState,\n  deleteTransaction,\n} = transactionsSlice.actions;\nexport default transactionsSlice.reducer;\n","import {categories} from \"./mocks/mocks\";\n\nclass CategoryDataService {\n  constructor() {\n  this.categories = categories;\n  }\n  async getAll() {\n    const json = this.categories;\n    return json;\n  }\n}\n\nexport default new CategoryDataService();\n","import {createSlice, createAsyncThunk} from '@reduxjs/toolkit';\n\nimport CategoryDataService from '../../services/category.service';\n\nexport const loadCategories = createAsyncThunk(\n  'categories/loadData',\n  async () => {\n    const data = await CategoryDataService.getAll();\n    const json = await data;\n    return json;\n  }\n)\n\nexport const postCategories = createAsyncThunk(\n  'categories/addData',\n  async (newCategory) => {\n    const data = await CategoryDataService.create(newCategory);\n    const json = await data;\n    return json;\n  }\n)\n\nexport const categoriesSlice = createSlice({\n  name: \"categories\",\n  initialState: {\n    allCategories: [],\n    newCategory: {\n      title: ``,\n    },\n    isLoading: false,\n    hasError: false,\n    isPending: false,\n    isFailedToCreate: false,\n  },\n  reducers: {\n    addCategory: (state, action) => {\n      return {\n        ...state,\n        newCategory: {\n          ...state.newCategory,\n          title: action.payload,\n        }\n      };\n    }\n  },\n  extraReducers: {\n    [loadCategories.pending]: (state) => {\n      state.isLoading = true;\n      state.hasError = false;\n    },\n    [loadCategories.fulfilled]: (state, action) => {\n      state.allCategories = action.payload;\n      state.isLoading = false;\n      state.hasError = false;\n    },\n    [loadCategories.rejected]: (state) => {\n      state.isLoading = false;\n      state.hasError = true;\n    },\n\n    [postCategories.pending]: (state) => {\n      state.isPending = true;\n      state.isFailedToCreate = false;\n    },\n    [postCategories.fulfilled]: (state) => {\n      state.newCategory = {\n        title: ``,\n      }\n      state.isPending = false;\n      state.isFailedToCreate = false;\n    },\n    [postCategories.rejected]: (state) => {\n      state.isPending = false;\n      state.isFailedToCreate = true;\n    }\n  },\n});\n\nexport const selectAllCategoriesState = (state) => state.categories.allCategories;\nexport const selectNewCategoryState = (state) => state.categories.newCategory;\nexport const isLoading = (state) => state.categories.isLoading;\nexport const isPending = (state) => state.categories.isPending;\n\nexport const {addCategory} = categoriesSlice.actions;\nexport default categoriesSlice.reducer;\n","import {accounts} from \"./mocks/mocks\";\n\nclass AccountDataService {\n  constructor() {\n  this.accounts = accounts;\n  }\n  async getAll() {\n    const json = this.accounts;\n    return json;\n  }\n}\n\nexport default new AccountDataService();\n","import {createSlice, createAsyncThunk} from '@reduxjs/toolkit';\n\nimport AccountDataService from '../../services/account.service';\n\nexport const loadAccounts = createAsyncThunk(\n  'accounts/loadData',\n  async () => {\n    const data = await AccountDataService.getAll();\n    const json = await data;\n    return json;\n  }\n)\n\nexport const postAccounts = createAsyncThunk(\n  'accounts/addData',\n  async (newAccount) => {\n    console.log(`🚀 ~ file: accounts-slice.js ~ line 17 ~ newAccount`, newAccount);\n    const data = await AccountDataService.create(newAccount);\n    const json = await data;\n    return json;\n  }\n)\n\nexport const accountsSlice = createSlice({\n  name: \"accounts\",\n  initialState: {\n    allAccounts: [],\n    newAccount: {\n      title: ``,\n      balance: 0,\n      startBalance: 0,\n      archive: false\n    },\n    isLoading: false,\n    hasError: false,\n    isPending: false,\n    isFailedToCreate: false,\n  },\n  reducers: {\n    addAccount: (state, action) => {\n      return {\n        ...state,\n        newAccount: {\n          ...state.newAccount,\n          title: action.payload,\n        }\n      };\n    }\n  },\n  extraReducers: {\n    [loadAccounts.pending]: (state) => {\n      state.isLoading = true;\n      state.hasError = false;\n    },\n    [loadAccounts.fulfilled]: (state, action) => {\n      state.allAccounts = action.payload;\n      state.isLoading = false;\n      state.hasError = false;\n    },\n    [loadAccounts.rejected]: (state) => {\n      state.isLoading = false;\n      state.hasError = true;\n    },\n\n    [postAccounts.pending]: (state) => {\n      state.isPending = true;\n      state.isFailedToCreate = false;\n    },\n    [postAccounts.fulfilled]: (state) => {\n      state.newAccount = {\n        title: ``,\n        balance: 0,\n        startBalance: 0,\n        archive: false\n      }\n      state.isPending = false;\n      state.isFailedToCreate = false;\n    },\n    [postAccounts.rejected]: (state) => {\n      state.isPending = false;\n      state.isFailedToCreate = true;\n    }\n  },\n});\n\nexport const selectAllAccountsState = (state) => state.accounts.allAccounts;\nexport const selectNewAccountsState = (state) => state.accounts.newAccount;\nexport const isLoading = (state) => state.accounts.isLoading;\nexport const isPending = (state) => state.accounts.isPending;\n\nexport const {addAccount} = accountsSlice.actions;\nexport default accountsSlice.reducer;\n","import {useSelector, useDispatch} from 'react-redux';\nimport {setSearchTerm, selectSearchTerm, clearSearchTerm} from '../../reducers/search/search-slice';\n\nfunction Search() {\n  const searchTerm = useSelector(selectSearchTerm);\n  const dispatch = useDispatch();\n\n  const onSearchTermChangeHandler = (e) => {\n    const userInput = e.target.value;\n    dispatch(setSearchTerm(userInput));\n  };\n\n  const onClearSearchTermHandler = () => {\n    dispatch(clearSearchTerm());\n  };\n\n  return (\n    <section className=\"search\">\n      <input\n        type=\"text\"\n        name=\"search\"\n        placeholder=\"Search by category\"\n        value={searchTerm}\n        onChange={onSearchTermChangeHandler}\n      />\n      {searchTerm.length > 0 && (\n        <span className=\"search__close-btn\" onClick={onClearSearchTermHandler}/>\n      )}\n    </section>\n  );\n};\n\nexport default Search;\n","import {useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {\n  setUserInput,\n  setCategory,\n  setAccount,\n  selectNewTransactionState,\n  addTransaction,\n  resetState\n} from '../../../reducers/transactions/transactions-slice';\n\nfunction TransactionCreateForm({categories, accounts}){\n  const newTransactionState = useSelector(selectNewTransactionState);\n  const dispatch = useDispatch();\n\n  const [onClickAddBtn, setOnClickAddBtn] = useState(false);\n  const [isHidden, setIsHidden] = useState(true);\n\n  const {sum, date} = newTransactionState;\n\n  const onChangeUserInput = ({target}) => {\n    const {name, value} = target;\n    dispatch(setUserInput({name: name, value: value}));\n  };\n\n  const onChangeSelectHandler = (selector) => (e) => {\n    const getId = (data, target) => {\n      let idItem;\n      data.map((item) => {\n        if (item.title === target) {\n          idItem = item.id;\n        }\n        return idItem;\n      });\n      return idItem;\n    }\n\n    if (selector === \"account\") {\n      const accountId = getId(accounts, e.target.value);\n      dispatch(setAccount({id: accountId, title: e.target.value}));\n    }\n    if (selector === \"category\") {\n      const categoryId = getId(categories, e.target.value);\n      dispatch(setCategory({id: categoryId, title: e.target.value}));\n    }\n  };\n\n  const onClickSubmitButton = (e) => {\n    e.preventDefault();\n\n    dispatch(addTransaction([newTransactionState]));\n    dispatch(resetState());\n    setOnClickAddBtn(false);\n\n    setTimeout(function () {\n      setIsHidden(true);\n    }, 500)\n  };\n\n  const onClickAddButton = () => {\n    const isAddBtnClick = !onClickAddBtn;\n    const hiddenToggle = !isHidden;\n\n    setOnClickAddBtn(isAddBtnClick);\n\n    if (hiddenToggle === false) {\n      setIsHidden(hiddenToggle);\n    } else {\n      setTimeout(function () {\n        setIsHidden(hiddenToggle);\n      }, 500)\n    }\n  };\n\n  return (\n    <section className=\"transactions\">\n      <div className=\"transactions__title\">\n        <h2>Transactions</h2>\n        <p\n          className={`transaction-add__btn ${onClickAddBtn ? \"transaction-add__btn--click\" : \"\"}`}\n          onClick={onClickAddButton}\n          >\n          Add\n        </p>\n      </div>\n      <div className=\"transactions__wrapper\">\n        <form onSubmit={onClickSubmitButton}>\n          <div\n            className={`transaction-add ${isHidden ? \"transaction-add__hidden\" : \"\"} ${onClickAddBtn ? \"transaction-add__fade-in\" : \"transaction-add__fade-out\"}`}>\n            <input\n              type=\"number\"\n              name=\"sum\"\n              placeholder=\"0.00\"\n              value={sum}\n              onChange={onChangeUserInput}\n              required\n              />\n\n            <select\n              className=\"form-select\"\n              aria-label=\"Default select example\"\n              onChange={onChangeSelectHandler(\"category\")}\n              required\n              >\n              <option value=\"\" hidden>Choose a category</option>\n              {categories &&\n                categories.map((category) => (\n                  <option\n                    key={category.id}\n                    value={category.title}\n                    selected={category.id ===  newTransactionState.category.id ? true: false}\n                  >\n                  {category.title}\n                  </option>\n                ))}\n            </select>\n\n            <select\n              className=\"form-select\"\n              aria-label=\"Default select example\"\n              onChange={onChangeSelectHandler(\"account\")}\n              required\n              >\n              <option value=\"\" hidden>Choose an account</option>\n              {accounts &&\n                accounts.map((account) => (\n                  <option\n                    key={account.id}\n                    value={account.title}\n                    selected={account.id ===  newTransactionState.account.id ? true: false}\n                  >\n                  {account.title}\n                  </option>\n                ))}\n            </select>\n\n            <input\n              type=\"date\"\n              name=\"date\"\n              value={date}\n              onChange={onChangeUserInput}\n              required\n              />\n\n            <div className=\"transaction-add__wrapper\">\n              <div className=\"transaction-add__type\">\n                <input\n                  type=\"checkbox\"\n                  id=\"type\"\n                  name=\"outcome\"\n                  onChange={onChangeUserInput} />\n                <label htmlFor=\"type\">Income</label>\n              </div>\n            </div>\n\n            <button className=\"button\" type=\"submit\">Create</button>\n          </div>\n        </form>\n      </div>\n    </section>\n  );\n}\n\nexport default TransactionCreateForm;\n","function Balance({transactions}) {\n  const sumOutcomes = transactions.map((transaction) => {\n      transaction.outcome ? transaction = +transaction.sum : transaction = null;\n      return transaction;\n    }).reduce((a, b) => a + b, 0);\n\n    const sumIncomes = transactions.map((item) => {\n      !item.outcome ? item = +item.sum : item = null;\n      return item;\n    }).reduce((a, b) => a + b, 0);\n\n  return (\n    <section className=\"balance\">\n      <div className=\"balance__container balance__balance\">\n        <div>\n          <p>Your balance</p>\n          <p className=\"balance__amount\">{sumIncomes - sumOutcomes} €</p>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default Balance;\n","export function formatDate (dateString) {\n  const date = new Date(dateString);\n  const options = {\n    day: `2-digit`,\n    month: `short`,\n    year: `numeric`\n  };\n  return date.toLocaleString(`en-EN`, options);\n};\n","import {useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {deleteTransaction} from '../../../reducers/transactions/transactions-slice';\n\nfunction TransactionsItem({categoryTitle, accountTitle, outcome, sum, id}) {\n  const dispatch = useDispatch();\n\n  const [showDeleteBtn, setShowDeleteBtn] = useState(false);\n\n  const onClickDeleteButton = ({target}) => {\n    const id = target.id;\n    dispatch(deleteTransaction(id));\n  };\n\n  const handleDeleteButtonToggle = () => {\n    const isShowDeleteBtn = (showDeleteBtn === true) ? false : true;\n    setShowDeleteBtn(isShowDeleteBtn)\n  };\n\n  return (\n    <li\n      className=\"transactions-list__item\"\n      onMouseOver={handleDeleteButtonToggle}\n      onMouseOut={handleDeleteButtonToggle}\n      >\n      <div className=\"transactions-list__item-wrapper\">\n        <p>{categoryTitle}</p>\n        <p className=\"transactions-list__item--expense\">{outcome ? `- ` : `+ `}{sum} €</p>\n      </div>\n      <div className=\"transactions-list__item-wrapper\">\n        <p className=\"transactions-list__item--account\">{accountTitle}</p>\n        <p\n          className={`transactions-list__item--edit ${showDeleteBtn ? \"\" : \"hidden\"}`}\n          id={id}\n          onClick={onClickDeleteButton}\n          >\n        delete</p>\n      </div>\n    </li>\n  );\n}\n\nexport default TransactionsItem;\n","import {formatDate} from \"../../../utils/utils\";\nimport TransactionItem from \"./Item\";\n\nfunction TransactionsItemsContainer({date, transactions}) {\n  const dayTransactions = transactions.filter((transaction) => formatDate(transaction.date) === date);\n\n  return (\n    dayTransactions.map((transaction, index) => (\n      <div key={index}>\n        <TransactionItem\n          categoryTitle={transaction.category.title}\n          accountTitle={transaction.account.title}\n          outcome={transaction.outcome}\n          sum={transaction.sum}\n          id={transaction.id}\n          />\n      </div>\n    ))\n  );\n}\n\nexport default TransactionsItemsContainer;\n","import TransactionItemsContainer from \"./Items/ItemsContainer\";\nimport {formatDate} from \"../../utils/utils\";\n\nfunction TransactionsList({transactions}) {\n  const dates = [...new Set(transactions\n    .map(date => formatDate(date.date)))];\n  return (\n    <section className=\"transactions-list\">\n      <h2>Transactions List</h2>\n      {dates.map((date, index) => (\n        <ul className=\"transactions-list__list\" key={index}>\n          <div className=\"transactions-list__day\">\n            <p>{date}</p>\n          </div>\n          <TransactionItemsContainer date={date} transactions={transactions} />\n        </ul>\n      ))}\n    </section>\n  );\n}\n\nexport default TransactionsList;\n","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {loadTransactions, selectFilteredTransactions, selectAllTransactionsState} from './reducers/transactions/transactions-slice'\nimport {loadCategories, selectAllCategoriesState} from './reducers/categories/categories-slice'\nimport {loadAccounts, selectAllAccountsState} from './reducers/accounts/accounts-slice'\n\nimport Search from './components/Search/Search';\nimport TransactionCreateForm from './components/Transactions/CreateForm/Form';\nimport Balance from './components/Balance/Balance';\nimport TransactionsList from './components/Transactions/List';\n\nfunction App() {\n  const allTransactions = useSelector(selectAllTransactionsState);\n  const filteredTransactions = useSelector(selectFilteredTransactions);\n  const allCategories = useSelector(selectAllCategoriesState);\n  const allAccounts = useSelector(selectAllAccountsState);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadTransactions());\n    dispatch(loadCategories());\n    dispatch(loadAccounts());\n  }, [dispatch]);\n\n  return (\n    <div className=\"container\">\n      <main className=\"page-main\">\n        <Search />\n        <TransactionCreateForm\n          categories={allCategories}\n          accounts={allAccounts}\n          />\n        <Balance transactions={allTransactions} />\n        <TransactionsList transactions={filteredTransactions} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import {configureStore} from \"@reduxjs/toolkit\";\n\nimport transactionsReducer from '../reducers/transactions/transactions-slice';\nimport categoriesReducer from '../reducers/categories/categories-slice';\nimport accountsReducer from '../reducers/accounts/accounts-slice';\nimport searchTermReducer from '../reducers/search/search-slice';\n\nexport default configureStore({\n  reducer: {\n    transactions: transactionsReducer,\n    categories: categoriesReducer,\n    accounts: accountsReducer,\n    searchTerm: searchTermReducer,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport App from './App';\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}