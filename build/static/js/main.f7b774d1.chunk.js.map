{"version":3,"sources":["services/mocks/mocks.js","services/transaction.service.js","reducers/search/search-slice.js","reducers/transactions/transactions-slice.js","services/category.service.js","reducers/categories/categories-slice.js","services/account.service.js","reducers/accounts/accounts-slice.js","components/Search/Search.js","components/Transactions/CreateForm/Form.js","components/Balance/Balance.js","utils/utils.js","components/Transactions/Item.js","components/Transactions/List.js","App.js","store/store.js","index.js"],"names":["module","exports","category","id","title","account","balance","startBalance","archive","transactions","sum","date","outcome","TransactionDataService","mocks","this","a","json","searchTermSlice","createSlice","name","initialState","reducers","setSearchTerm","state","action","payload","clearSearchTerm","selectSearchTerm","searchTerm","actions","loadTransactions","createAsyncThunk","getAll","data","transactionsSlice","allTransactions","newTransaction","Date","getTime","toISOString","slice","isLoading","hasError","setUserInput","value","setCategory","setAccount","addTransaction","resetState","deleteTransaction","newTransactions","filter","transaction","extraReducers","pending","fulfilled","rejected","selectAllTransactionsState","selectNewTransactionState","selectFilteredTransactions","toLowerCase","includes","sort","b","setTransactionId","CategoryDataService","loadCategories","postCategories","newCategory","create","categoriesSlice","allCategories","isPending","isFailedToCreate","addCategory","selectAllCategoriesState","categories","AccountDataService","loadAccounts","postAccounts","newAccount","console","log","accountsSlice","allAccounts","addAccount","selectAllAccountsState","accounts","Search","useSelector","dispatch","useDispatch","className","type","placeholder","onChange","e","userInput","target","length","onClick","TransactionCreateForm","newTransactionState","onChangeUserInput","onChangeSelectHandler","selector","getId","idItem","map","item","accountId","categoryId","hidden","selected","htmlFor","Balance","sumOutcomes","reduce","sumIncomes","formatCommentDate","dateString","toLocaleString","day","month","year","TransactionsItem","dayTransactions","onClickDeleteButton","index","TransactionsList","dates","Set","App","filteredTransactions","useEffect","configureStore","reducer","transactionsReducer","categoriesReducer","accountsReducer","searchTermReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.f7b774d1.chunk.js","sourcesContent":["const category = [\n  {id: 1, title: `Supermarket`},\n  {id: 2, title: `Clothes`},\n  {id: 3, title: `Salary`},\n  {id: 4, title: `Family`},\n  {id: 5, title: `Cafe`},\n  {id: 6, title: `Health`},\n  {id: 7, title: `Car`},\n];\n\nconst account = [\n  {id: 1, title: `Postbank`, balance: 55000, startBalance: 0, archive: false},\n  {id: 2, title: `Cash`, balance: 2000, startBalance: 0, archive: false},\n  {id: 3, title: `N26`, balance: 550000, startBalance: 0, archive: false},\n];\n\nconst transactions = [\n  {\n    id: 1,\n    sum: 120,\n    date: `2021-09-09`,\n    outcome: true,\n    account: {id: 1, title: `N26`},\n    category: {id: 1, title: `Supermarket`},\n  },\n  {\n    id: 2,\n    sum: 35,\n    date: `2021-09-04`,\n    outcome: true,\n    account: {id: 1, title: `Cash`},\n    category: {id: 1, title: `Cafe`},\n  },\n  {\n    id: 3,\n    sum: 3500,\n    date: `2021-09-01`,\n    outcome: false,\n    account: {id: 1, title: `N26`},\n    category: {id: 1, title: `Salary`},\n  },\n];\n\nmodule.exports = {\n  category,\n  account,\n  transactions,\n};\n","import mocks from \"./mocks/mocks\";\n\nclass TransactionDataService {\n  constructor() {\n  const {transactions} = mocks;\n  this.transactions = transactions;\n  }\n  async getAll() {\n    const json = this.transactions;\n    return json;\n  }\n}\n\nexport default new TransactionDataService();\n","import {createSlice} from '@reduxjs/toolkit';\n\nexport const searchTermSlice = createSlice({\n  name: \"searchTerm\",\n  initialState: '',\n  reducers: {\n    setSearchTerm: (state, action) => {\n      return action.payload;\n      },\n    clearSearchTerm: (state, action) => {\n      return '';\n      }\n    },\n});\n\nexport const selectSearchTerm = (state) => state.searchTerm;\n\nexport const {\n  setSearchTerm,\n  clearSearchTerm\n} = searchTermSlice.actions;\nexport default searchTermSlice.reducer;\n","import {createSlice, createAsyncThunk} from '@reduxjs/toolkit';\n\nimport TransactionDataService from '../../services/transaction.service';\nimport {selectSearchTerm} from '../search/search-slice';\n\n\nexport const loadTransactions = createAsyncThunk(\n  'transactions/loadData',\n  async () => {\n    const data = await TransactionDataService.getAll();\n    const json = await data;\n    return json;\n  }\n)\n\nexport const transactionsSlice = createSlice({\n  name: \"transactions\",\n  initialState: {\n    allTransactions: [],\n    newTransaction: {\n      id: new Date().getTime(),\n      sum: ``,\n      date: new Date().toISOString().slice(0, -14),\n      outcome: true,\n      account: [],\n      category: [],\n    },\n    isLoading: false,\n    hasError: false\n  },\n  reducers: {\n    setUserInput: (state, action) => {\n      let {name, value} = action.payload;\n      if (name === `outcome`) {\n        value = (state.newTransaction.outcome === true) ? false : true;\n      }\n      return {\n        ...state,\n        newTransaction: {\n          ...state.newTransaction,\n          [name]: value\n        }\n      };\n    },\n    setCategory: (state, action) => {\n      return {\n        ...state,\n        newTransaction: {\n          ...state.newTransaction,\n          category: action.payload,\n        }\n      };\n    },\n    setAccount: (state, action) => {\n      return {\n        ...state,\n        newTransaction: {\n          ...state.newTransaction,\n          account: action.payload,\n        }\n      };\n    },\n    addTransaction: (state, action) => {\n      return {\n        ...state,\n        allTransactions: [\n          ...state.allTransactions,\n          ...action.payload,\n        ],\n      };\n    },\n    resetState: (state, action) => {\n      return {\n        ...state,\n        newTransaction: {\n          id: new Date().getTime(),\n          sum: ``,\n          date: new Date().toISOString().slice(0, -14),\n          outcome: true,\n          account: [],\n          category: [],\n        },\n      };\n    },\n    deleteTransaction: (state, action) => {\n      const id = action.payload;\n      const newTransactions = state.allTransactions.filter(transaction => transaction.id !== +id)\n      return {\n        ...state,\n        allTransactions: newTransactions,\n      };\n    },\n  },\n  extraReducers: {\n    [loadTransactions.pending]: (state) => {\n      state.isLoading = true;\n      state.hasError = false;\n    },\n    [loadTransactions.fulfilled]: (state, action) => {\n      state.allTransactions = action.payload;\n      state.newTransaction = {\n        ...state.newTransaction,\n      }\n      state.isLoading = false;\n      state.hasError = false;\n    },\n    [loadTransactions.rejected]: (state) => {\n      state.isLoading = false;\n      state.hasError = true;\n    },\n  },\n});\n\nexport const selectAllTransactionsState = (state) => state.transactions.allTransactions;\nexport const selectNewTransactionState = (state) => state.transactions.newTransaction;\nexport const isLoading = (state) => state.transactions.isLoading;\nexport const hasError = (state) => state.transactions.hasError;\n\nexport const selectFilteredTransactions = (state) => {\n  const allTransactions = selectAllTransactionsState(state);\n  const searchTerm = selectSearchTerm(state);\n\n  return allTransactions\n          .filter((transaction) => transaction.category.title.toLowerCase().includes(searchTerm.toLowerCase()))\n          .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n};\n\nexport const {\n  setUserInput,\n  setCategory,\n  setAccount,\n  setTransactionId,\n  addTransaction,\n  resetState,\n  deleteTransaction\n} = transactionsSlice.actions;\nexport default transactionsSlice.reducer;\n","import mocks from \"./mocks/mocks\";\n\nclass CategoryDataService {\n  constructor() {\n  const {category} = mocks;\n  this.category = category;\n  }\n  async getAll() {\n    const json = this.category;\n    return json;\n  }\n}\n\nexport default new CategoryDataService();\n","import {createSlice, createAsyncThunk} from '@reduxjs/toolkit';\n\nimport CategoryDataService from '../../services/category.service';\n\nexport const loadCategories = createAsyncThunk(\n  'categories/loadData',\n  async () => {\n    const data = await CategoryDataService.getAll();\n    const json = await data;\n    return json;\n  }\n)\n\nexport const postCategories = createAsyncThunk(\n  'categories/addData',\n  async (newCategory) => {\n    const data = await CategoryDataService.create(newCategory);\n    const json = await data;\n    return json;\n  }\n)\n\nexport const categoriesSlice = createSlice({\n  name: \"categories\",\n  initialState: {\n    allCategories: [],\n    newCategory: {\n      title: ``,\n    },\n    isLoading: false,\n    hasError: false,\n    isPending: false,\n    isFailedToCreate: false,\n  },\n  reducers: {\n    addCategory: (state, action) => {\n      return {\n        ...state,\n        newCategory: {\n          ...state.newCategory,\n          title: action.payload,\n        }\n      };\n    }\n  },\n  extraReducers: {\n    [loadCategories.pending]: (state) => {\n      state.isLoading = true;\n      state.hasError = false;\n    },\n    [loadCategories.fulfilled]: (state, action) => {\n      state.allCategories = action.payload;\n      state.isLoading = false;\n      state.hasError = false;\n    },\n    [loadCategories.rejected]: (state) => {\n      state.isLoading = false;\n      state.hasError = true;\n    },\n\n    [postCategories.pending]: (state) => {\n      state.isPending = true;\n      state.isFailedToCreate = false;\n    },\n    [postCategories.fulfilled]: (state) => {\n      state.newCategory = {\n        title: ``,\n      }\n      state.isPending = false;\n      state.isFailedToCreate = false;\n    },\n    [postCategories.rejected]: (state) => {\n      state.isPending = false;\n      state.isFailedToCreate = true;\n    }\n  },\n});\n\nexport const selectAllCategoriesState = (state) => state.categories.allCategories;\nexport const selectNewCategoryState = (state) => state.categories.newCategory;\nexport const isLoading = (state) => state.categories.isLoading;\nexport const isPending = (state) => state.categories.isPending;\n\nexport const {addCategory} = categoriesSlice.actions;\nexport default categoriesSlice.reducer;\n","import mocks from \"./mocks/mocks\";\n\nclass AccountDataService {\n  constructor() {\n  const {account} = mocks;\n  this.account = account;\n  }\n  async getAll() {\n    const json = this.account;\n    return json;\n  }\n}\n\nexport default new AccountDataService();\n","import {createSlice, createAsyncThunk} from '@reduxjs/toolkit';\n\nimport AccountDataService from '../../services/account.service';\n\nexport const loadAccounts = createAsyncThunk(\n  'accounts/loadData',\n  async () => {\n    const data = await AccountDataService.getAll();\n    const json = await data;\n    return json;\n  }\n)\n\nexport const postAccounts = createAsyncThunk(\n  'accounts/addData',\n  async (newAccount) => {\n    console.log(`🚀 ~ file: accounts-slice.js ~ line 17 ~ newAccount`, newAccount);\n    const data = await AccountDataService.create(newAccount);\n    const json = await data;\n    return json;\n  }\n)\n\nexport const accountsSlice = createSlice({\n  name: \"accounts\",\n  initialState: {\n    allAccounts: [],\n    newAccount: {\n      title: ``,\n      balance: 0,\n      startBalance: 0,\n      archive: false\n    },\n    isLoading: false,\n    hasError: false,\n    isPending: false,\n    isFailedToCreate: false,\n  },\n  reducers: {\n    addAccount: (state, action) => {\n      return {\n        ...state,\n        newAccount: {\n          ...state.newAccount,\n          title: action.payload,\n        }\n      };\n    }\n  },\n  extraReducers: {\n    [loadAccounts.pending]: (state) => {\n      state.isLoading = true;\n      state.hasError = false;\n    },\n    [loadAccounts.fulfilled]: (state, action) => {\n      state.allAccounts = action.payload;\n      state.isLoading = false;\n      state.hasError = false;\n    },\n    [loadAccounts.rejected]: (state) => {\n      state.isLoading = false;\n      state.hasError = true;\n    },\n\n    [postAccounts.pending]: (state) => {\n      state.isPending = true;\n      state.isFailedToCreate = false;\n    },\n    [postAccounts.fulfilled]: (state) => {\n      state.newAccount = {\n        title: ``,\n        balance: 0,\n        startBalance: 0,\n        archive: false\n      }\n      state.isPending = false;\n      state.isFailedToCreate = false;\n    },\n    [postAccounts.rejected]: (state) => {\n      state.isPending = false;\n      state.isFailedToCreate = true;\n    }\n  },\n});\n\nexport const selectAllAccountsState = (state) => state.accounts.allAccounts;\nexport const selectNewAccountsState = (state) => state.accounts.newAccount;\nexport const isLoading = (state) => state.accounts.isLoading;\nexport const isPending = (state) => state.accounts.isPending;\n\nexport const {addAccount} = accountsSlice.actions;\nexport default accountsSlice.reducer;\n","import {useSelector, useDispatch} from 'react-redux';\nimport {setSearchTerm, selectSearchTerm, clearSearchTerm} from '../../reducers/search/search-slice';\n\nfunction Search() {\n  const searchTerm = useSelector(selectSearchTerm);\n  const dispatch = useDispatch();\n\n  const onSearchTermChangeHandler = (e) => {\n    const userInput = e.target.value;\n    dispatch(setSearchTerm(userInput));\n  };\n\n  const onClearSearchTermHandler = () => {\n    dispatch(clearSearchTerm());\n  };\n\n  return (\n    <section className=\"search\">\n      <input\n        type=\"text\"\n        name=\"search\"\n        placeholder=\"Search by category\"\n        value={searchTerm}\n        onChange={onSearchTermChangeHandler}\n      />\n      {searchTerm.length > 0 && (\n        <span className=\"search__close-btn\" onClick={onClearSearchTermHandler}/>\n      )}\n    </section>\n  );\n};\n\nexport default Search;\n","import {useSelector, useDispatch} from 'react-redux';\nimport {\n  setUserInput,\n  setCategory,\n  setAccount,\n  selectNewTransactionState,\n  addTransaction,\n  resetState\n} from '../../../reducers/transactions/transactions-slice';\n\nfunction TransactionCreateForm({categories, accounts}){\n  const newTransactionState = useSelector(selectNewTransactionState);\n  const dispatch = useDispatch();\n\n  const {sum, date} = newTransactionState;\n\n  const onChangeUserInput = ({target}) => {\n    const {name, value} = target;\n    dispatch(setUserInput({name: name, value: value}));\n  };\n\n  const onChangeSelectHandler = (selector) => (e) => {\n    const getId = (data, target) => {\n      let idItem;\n      data.map((item) => {\n        if (item.title === target) {\n          idItem = item.id;\n        }\n        return idItem;\n      });\n      return idItem;\n    }\n\n    if (selector === \"account\") {\n      const accountId = getId(accounts, e.target.value);\n      dispatch(setAccount({id: accountId, title: e.target.value}));\n    }\n    if (selector === \"category\") {\n      const categoryId = getId(categories, e.target.value);\n      dispatch(setCategory({id: categoryId, title: e.target.value}));\n    }\n  };\n\n  const onClickSubmitButton = () => {\n    dispatch(addTransaction([newTransactionState]));\n    dispatch(resetState());\n  };\n\n  return (\n    <section className=\"transactions\">\n      <div className=\"transactions__title\">\n        <h2>Transactions</h2>\n        <p className=\"transaction-add__btn\">Add</p>\n      </div>\n      <div className=\"transactions__wrapper\">\n        <div className=\"transaction-add transaction-add__hidden transaction-add__fade-out\">\n          <input\n            type=\"number\"\n            name=\"sum\"\n            placeholder=\"Enter an amount\"\n            value={sum}\n            onChange={onChangeUserInput}\n            />\n\n          <select\n            className=\"form-select\"\n            aria-label=\"Default select example\"\n            onChange={onChangeSelectHandler(\"category\")}\n            >\n            <option value=\"\" hidden>Choose a category</option>\n            {categories &&\n              categories.map((category) => (\n                <option\n                  key={category.id}\n                  value={category.title}\n                  selected={category.id ===  newTransactionState.category.id ? true: false}\n                >{category.title}\n                </option>\n              ))}\n          </select>\n\n          <select\n            className=\"form-select\"\n            aria-label=\"Default select example\"\n            onChange={onChangeSelectHandler(\"account\")}\n            >\n            <option value=\"\" hidden>Choose an account</option>\n            {accounts &&\n              accounts.map((account) => (\n                <option\n                  key={account.id}\n                  value={account.title}\n                  selected={account.id ===  newTransactionState.account.id ? true: false}\n                >{account.title}\n                </option>\n              ))}\n          </select>\n\n          <input\n            type=\"date\"\n            name=\"date\"\n            value={date}\n            onChange={onChangeUserInput}\n            />\n\n          <div className=\"transaction-add__wrapper\">\n            <div className=\"transaction-add__type\">\n              <input\n                type=\"checkbox\"\n                id=\"type\"\n                name=\"outcome\"\n                onChange={onChangeUserInput} />\n              <label htmlFor=\"type\">Income</label>\n            </div>\n          </div>\n\n          <button className=\"button\" onClick={onClickSubmitButton}>Create</button>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default TransactionCreateForm;\n","function Balance({transactions}) {\n  const sumOutcomes = transactions.map((transaction) => {\n      transaction.outcome ? transaction = +transaction.sum : transaction = null;\n      return transaction;\n    }).reduce((a, b) => a + b, 0);\n\n    const sumIncomes = transactions.map((item) => {\n      !item.outcome ? item = +item.sum : item = null;\n      return item;\n    }).reduce((a, b) => a + b, 0);\n\n  return (\n    <section className=\"balance\">\n      <div className=\"balance__container balance__balance\">\n        <div>\n          <p>Your balance</p>\n          <p className=\"balance__amount\">{sumIncomes - sumOutcomes} €</p>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default Balance;\n","export function formatCommentDate (dateString) {\n  const date = new Date(dateString);\n  const options = {\n    day: `2-digit`,\n    month: `short`,\n    year: `numeric`\n  };\n  return date.toLocaleString(`ru-RU`, options);\n};\n","import {useDispatch} from 'react-redux';\nimport {formatCommentDate} from \"../../utils/utils\";\nimport {deleteTransaction} from '../../reducers/transactions/transactions-slice';\n\nfunction TransactionsItem({date, transactions}) {\n  const dayTransactions = transactions.filter((transaction) => formatCommentDate(transaction.date) === date);\n  const dispatch = useDispatch();\n\n  const onClickDeleteButton = ({target}) => {\n    const id = target.id;\n    dispatch(deleteTransaction(id));\n  };\n\n  return (\n    dayTransactions.map((transaction, index) => (\n      <div key={index}>\n        <li className=\"transactions-list__item\" >\n          <div className=\"transactions-list__item-wrapper\">\n            <p>{transaction.category.title}</p>\n            <p className=\"transactions-list__item--expense\">{transaction.outcome ? `- ` : `+ `}{transaction.sum} €</p>\n          </div>\n          <div className=\"transactions-list__item-wrapper\">\n            <p className=\"transactions-list__item--account\">{transaction.account.title}</p>\n            <p className=\"transactions-list__item--edit hidden\" id={transaction.id} onClick={onClickDeleteButton}>\n            delete</p>\n          </div>\n        </li>\n      </div>\n    ))\n  );\n}\n\nexport default TransactionsItem;\n","import TransactionItem from \"./Item\";\nimport {formatCommentDate} from \"../../utils/utils\";\n\nfunction TransactionsList({transactions}) {\n  const dates = [...new Set(transactions\n    .map(date => formatCommentDate(date.date)))];\n  return (\n    <section className=\"transactions-list\">\n      <h2>Transactions List</h2>\n      {dates.map((date, index) => (\n        <ul className=\"transactions-list__list\" key={index}>\n          <div className=\"transactions-list__day\">\n            <p>{date}</p>\n          </div>\n          <TransactionItem date={date} transactions={transactions} />\n        </ul>\n      ))}\n    </section>\n  );\n}\n\nexport default TransactionsList;\n","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {loadTransactions, selectFilteredTransactions, selectAllTransactionsState} from './reducers/transactions/transactions-slice'\nimport {loadCategories, selectAllCategoriesState} from './reducers/categories/categories-slice'\nimport {loadAccounts, selectAllAccountsState} from './reducers/accounts/accounts-slice'\n\nimport Search from './components/Search/Search';\nimport TransactionCreateForm from './components/Transactions/CreateForm/Form';\nimport Balance from './components/Balance/Balance';\nimport TransactionsList from './components/Transactions/List';\n\nfunction App() {\n  const allTransactions = useSelector(selectAllTransactionsState);\n  const filteredTransactions = useSelector(selectFilteredTransactions);\n  const allCategories = useSelector(selectAllCategoriesState);\n  const allAccounts = useSelector(selectAllAccountsState);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadTransactions());\n    dispatch(loadCategories());\n    dispatch(loadAccounts());\n  }, [dispatch]);\n\n  return (\n    <div className=\"container\">\n      <main className=\"page-main\">\n        <Search />\n        <TransactionCreateForm\n          categories={allCategories}\n          accounts={allAccounts}\n          />\n        <Balance transactions={allTransactions} />\n        <TransactionsList transactions={filteredTransactions} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import {configureStore} from \"@reduxjs/toolkit\";\n\nimport transactionsReducer from '../reducers/transactions/transactions-slice';\nimport categoriesReducer from '../reducers/categories/categories-slice';\nimport accountsReducer from '../reducers/accounts/accounts-slice';\nimport searchTermReducer from '../reducers/search/search-slice';\n\nexport default configureStore({\n  reducer: {\n    transactions: transactionsReducer,\n    categories: categoriesReducer,\n    accounts: accountsReducer,\n    searchTerm: searchTermReducer,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport App from './App';\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}